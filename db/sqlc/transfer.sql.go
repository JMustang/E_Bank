// Code generated by sqlc. DO NOT EDIT.
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    from_accoubt_id,
    to_accoubt_id,
    amount
) VALUES (
    $1, $2, $3
) RETURNING id, from_accoubt_id, to_accoubt_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccoubtID int64 `json:"from_accoubt_id"`
	ToAccoubtID   int64 `json:"to_accoubt_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccoubtID, arg.ToAccoubtID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccoubtID,
		&i.ToAccoubtID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_accoubt_id, to_accoubt_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccoubtID,
		&i.ToAccoubtID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
